{"version":3,"sources":["components/NavBar/NavBar.js","components/SagaChar/SagaChar.js","components/GameBox/GameBox.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","className","id","href","score","topScore","message","SagaChar","onClick","whenClicked","src","image","alt","name","GameBox","children","Game","state","characters","char","filter","click","clicked","console","log","setState","map","item","newCharacters","sort","a","b","Math","random","this","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8zCAkBeA,G,YAbA,SAAAC,GAAK,OAElB,yBAAKC,UAAU,uCACb,uBAAGA,UAAU,eAAeC,GAAG,UAAUC,KAAK,KAA9C,eACA,wBAAIF,UAAU,4BACZ,wBAAIA,UAAU,YACZ,0BAAMA,UAAU,uBAAhB,UAA8CD,EAAMI,MAApD,iBAAyEJ,EAAMK,YAGnF,0BAAMJ,UAAU,4BAA2B,4BAAKD,EAAMM,aCL3CC,G,MANE,SAAAP,GAAK,OAClB,yBAAKC,UAAU,4BAA4BO,QAAS,kBAAMR,EAAMS,YAAYT,EAAME,MAC/E,yBAAKD,UAAU,yBAAyBS,IAAKV,EAAMW,MAAOC,IAAKZ,EAAMa,U,MCK7DC,MAPf,SAAiBd,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMe,W,OCkH1BC,G,iNA7GXC,MAAQ,CACJC,aACAd,MAAO,EACPC,SAAU,EACVC,QAAS,I,EAGbG,YAAc,SAAAU,GAIV,GAFmB,EAAKF,MAAMC,WAAWE,QAAO,SAAAC,GAAK,OAAIA,EAAMnB,KAAOiB,KAErD,GAAGG,QAAS,CACzBC,QAAQC,IAAI,qBACZ,EAAKC,SAAS,CAAErB,MAAO,IACvB,EAAKqB,SAAS,CAAEnB,QAAS,gDAEzB,IAAIY,EAAa,EAAKD,MAAMC,WAAWQ,KAAI,SAAAC,GAGvC,OAFAA,EAAKL,SAAU,EAERK,KAGX,EAAKF,SAAS,CAAEP,oBAIhB,EAAKO,SAAS,CAAErB,MAAO,EAAKa,MAAMb,MAAQ,IAAK,WAK3C,GAJI,EAAKa,MAAMb,MAAQ,EAAKa,MAAMZ,UAC9B,EAAKoB,SAAS,CAAEpB,SAAU,EAAKY,MAAMb,QAGrC,EAAKa,MAAMb,MAAQ,GAAI,CAEvBmB,QAAQC,IAAI,qBAEZ,IAAII,EAAgB,EAAKX,MAAMC,WAAWQ,KAAI,SAAAC,GAK1C,OAJIA,EAAKzB,KAAOiB,IACZQ,EAAKL,SAAU,GAGZK,KAGXC,EAAgBA,EAAcC,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YAEvE,EAAKR,SAAS,CACVP,WAAYU,EACZtB,QAAS,2CAGV,CACHiB,QAAQC,IAAI,mBACZD,QAAQC,IAAI,qBAEZ,IAAII,EAAgB,EAAKX,MAAMC,WAAWQ,KAAI,SAAAC,GAG1C,OAFAA,EAAKL,SAAU,EAERK,KAGXC,EAAcC,MAAK,SAAUC,EAAGC,GAAK,MAAO,GAAMC,KAAKC,YAEvD,EAAKR,SAAS,CACVP,WAAYU,EACZxB,MAAO,EACPE,QAAS,4C,wEAQnB,IAAD,OAEL,OADAiB,QAAQC,IAAIU,KAAKjB,OAGb,6BACI,kBAAC,EAAD,CACIb,MAAO8B,KAAKjB,MAAMb,MAClBE,QAAS4B,KAAKjB,MAAMX,QACpBD,SAAU6B,KAAKjB,MAAMZ,WAEzB,kBAAC,EAAD,KACI,yBAAKJ,UAAU,aACX,yBAAKA,UAAU,OAGPiC,KAAKjB,MAAMC,WAAWQ,KAAI,SAAAP,GAAI,OAC1B,yBAAKlB,UAAU,2BACX,kBAAC,EAAD,CACIC,GAAIiB,EAAKjB,GACTiC,IAAKhB,EAAKjB,GACVW,KAAMM,EAAKN,KACXF,MAAOQ,EAAKR,MACZF,YAAa,EAAKA,0B,GAjG3C2B,cCDJC,EAFH,kBAAM,kBAAC,EAAD,OCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.66cf5f83.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nconst NavBar = props => (\n\n  <nav className=\"navbar navbar-expand-lg navbar-dark\">\n    <a className=\"navbar-brand\" id=\"navLogo\" href=\"/\">Saga Clicky</a>\n    <ul className=\"text-white nav-fills nav\">\n      <li className=\"nav-item\">\n        <span className=\"nav-link float-left\">Score: {props.score} | Top Score: {props.topScore}</span>\n      </li>\n    </ul>\n    <span className=\"text-warning nav-message\"><h5>{props.message}</h5></span>\n  </nav>\n)\n\nexport default NavBar;","import React from \"react\";\nimport \"./saga.css\";\n\nconst SagaChar = props => (\n    <div className=\"card box-shadow--16dp m-3\" onClick={() => props.whenClicked(props.id)}>\n       <img className=\"card-img-top img-fluid\" src={props.image} alt={props.name} />\n    </div>\n);\n\nexport default SagaChar;\n\n","import React from \"react\";\nimport \"./gamebox.css\";\n\nfunction GameBox(props) {\n  return <div className=\"gamebox\">{props.children}\n  \n  \n  </div>;\n}\n\nexport default GameBox;","import React, { Component } from \"react\";\nimport NavBar from \"../NavBar\";\nimport SagaChar from \"../SagaChar\";\nimport GameBox from \"../GameBox\";\nimport characters from \"../../characters.json\";\nimport \"./game.css\";\n\nclass Game extends Component {\n\n    state = {\n        characters,\n        score: 0,\n        topScore: 0,\n        message: \"\"\n    };\n\n    whenClicked = char => {\n\n        let correctClick = this.state.characters.filter(click => click.id === char);\n\n        if (correctClick[0].clicked) {\n            console.log(\"if 1 has been hit\");\n            this.setState({ score: 0 });\n            this.setState({ message: \"WRONG CHOICE!!!! GAME OVER!!! PLAY AGAIN!!!\" });\n            \n            let characters = this.state.characters.map(item => {\n                item.clicked = false;\n                \n                return item;\n            });\n            \n            this.setState({ characters });\n\n        } else {\n\n            this.setState({ score: this.state.score + 1 }, () => {\n                if (this.state.score > this.state.topScore) {\n                    this.setState({ topScore: this.state.score });\n                }\n\n                if (this.state.score < 12) {\n\n                    console.log(\"if 2 has been hit\");\n\n                    let newCharacters = this.state.characters.map(item => {\n                        if (item.id === char) {\n                            item.clicked = true;\n                        }\n\n                        return item;\n                    });\n\n                    newCharacters = newCharacters.sort(function (a, b) { return 0.5 - Math.random() });\n\n                    this.setState({\n                        characters: newCharacters,\n                        message: \"Hooray!!!!! Keep it Goin' Bucko!!!\"\n                    });\n\n                } else {\n                    console.log(\"12 has been hit\")\n                    console.log(\"if 3 has been hit\");\n\n                    let newCharacters = this.state.characters.map(item => {\n                        item.clicked = false;\n\n                        return item;\n                    });\n\n                    newCharacters.sort(function (a, b) { return 0.5 - Math.random() });\n\n                    this.setState({\n                        characters: newCharacters,\n                        score: 0,\n                        message: \"TOP FORM OLE SPORT! PLAY AGAIN!!!!\"\n                    });\n\n                }\n            });\n        }\n    };\n\n    render() {\n        console.log(this.state);\n        return (\n\n            <div>\n                <NavBar\n                    score={this.state.score}\n                    message={this.state.message}\n                    topScore={this.state.topScore}\n                />\n                <GameBox>\n                    <div className=\"container\">\n                        <div className=\"row\">\n                            {\n\n                                this.state.characters.map(char => (\n                                    <div className=\"col-3 float-left d-flex\">\n                                        <SagaChar\n                                            id={char.id}\n                                            key={char.id}\n                                            name={char.name}\n                                            image={char.image}\n                                            whenClicked={this.whenClicked}\n                                        />\n                                    </div>\n                                ))\n                            }\n                        </div>\n\n                    </div>\n                </GameBox>\n            </div>\n        );\n    }\n}\n\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Game from \"./components/Game\";\n\nconst App = () => <Game />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}